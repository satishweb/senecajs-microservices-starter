swagger: "2.0"
info:
  title: "UGRP API"
  description: |
    Provides functionality for updating, deleting and fetching Users and creating, updating, deleting and fetching Groups. 
    All the APIs require a valid session token for authentication.
    ### Users:
      #### Get:
      Fetches Users by user Id or token or lists users by search criteria. In case of get user by user Id or token, the details of the corresponding user are returned.
      In case of list, a paginated list of users satisfying the search/filter critera is returned. The output fields returned are according to theose specified in the
      configuration.

  version: "1.0.0"
host: 'key-local-api.example.com'
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json
paths:
  "/user/v1/get":
    post:
      parameters:
        - name: Authorization
          in: headers
          required: true
          type: string
        - name: userData
          in: body
          schema:
            type: object
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      security:
        - jwt.secured: []
  "/user/v1/update":
    put:
      parameters:
        - name: Authorization
          in: headers
          required: true
          type: string
        - name: updateUser
          in: body
          required: true
          schema:
            $ref: "#/definitions/updateUser"
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      security:
        - jwt.secured: []
  "/user/v1/delete":
    delete:
      parameters:
        - name: Authorization
          in: headers
          required: true
          type: string
        - name: deleteUser
          in: body
          required: true
          schema:
            type: object
            required:
              - userId
            properties:
              userId:
                type: integer
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      security:
        - jwt.secured: []
  "/group/v1/create":
    post:
      parameters:
        - name: Authorization
          in: headers
          required: true
          type: string
        - name: createGroup
          in: body
          required: true
          schema:
            $ref: "#/definitions/createGroup"
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      security:
        - jwt.secured: []
  "/group/v1/get":
    post:
      parameters:
        - name: Authorization
          in: headers
          required: true
          type: string
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      security:
        - jwt.secured: []
  "/group/v1/update":
    put:
      parameters:
        - name: Authorization
          in: headers
          required: true
          type: string
        - name: updateGroup
          in: body
          required: true
          schema:
            type: object
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      security:
        - jwt.secured: []
  "/group/v1/delete":
    delete:
      parameters:
        - name: Authorization
          in: headers
          required: true
          type: string
        - name: deleteGroup
          in: body
          required: true
          schema:
            $ref: "#/definitions/deleteGroup"
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      security:
        - jwt.secured: [] 
  "/role/v1/create":
    post:
      parameters:
        - name: Authorization
          in: headers
          required: true
          type: string
        - name: createRole
          in: body
          required: true
          schema:
            $ref: "#/definitions/createRole"
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      security:
        - jwt.secured: []
  "/role/v1/get":
    post:
      parameters:
        - name: Authorization
          in: headers
          required: true
          type: string
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      security:
        - jwt.secured: []
  "/role/v1/update":
    put:
      parameters:
        - name: Authorization
          in: headers
          required: true
          type: string
        - name: updateRole
          in: body
          required: true
          schema:
            type: object
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/Output"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      security:
        - jwt.secured: []
securityDefinitions:
  jwt.secured:
    type: apiKey
    name: Authorization
    in: header
  apiKey.secured:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Message:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: "The message code for the operation status."
      msg:
        type: string
        description: "The message for the operation status."
  Output:
    type: object
    properties:
      success:
        type: string
        format: boolean
        description: Tell's whether action is performed succesfully or not
      message:
        $ref: '#/definitions/Message'
  Error:
    properties:
      code:
        description: "Error Code"
        format: int32
        type: integer
      message:
        description: "Error message"
        type: string
  updateUser:
    type: object
    required:
      - userId
    properties:
      userId:
        description: The Id of the user whose profile is to be updated
        type: integer
      email:
        description: The email Id of the user
        type: string
      firstName:
        description: The first name of the user
        type: string
      lastName:
        description: The last name of the user
        type: string
      avatar:
        description: The URL of the user's avatar
        type: string
      contactNumber:
        description: The contact number of the user
        type: string
      address:
        description: The address of the user
        type: string
      gender:
        description: The gender of the user
        type: string
      birthDate:
        description: The user's date of birth 
        type: string
      facebookId:
        description: The user's Facebook Id returned by Facebook on successful login
        type: string
      linkedInId:
        description: The user's LinkedIn Id returned by LinkedIn on successful login 
        type: string
      googleId:
        description: The user's Google Id returned by Google on successful login
        type: string
  createGroup:
    type: object
    required:
      - name
    properties:
      userIds:
        description: The array of user Ids to be added to the group
        type: array
        items:
          description: The Id of the user to be added to the group (must be present in the team)
          type: integer
      description:
        description: Small description for the group
        type: string
      name:
        description: The name of the group to be created
        type: string
  createRole:
    type: object
    required:
      - name
    properties:
      permissionIds:
        description: The array of permission Ids to be assigned to the role
        type: array
        items:
          description: The Id of the permission to be assigned to the role
          type: integer
      userIds:
        description: The array of user Ids to whom the role is to be assigned
        type: array
        items:
          description: The Id of the user to whom the role is assigned (must be present in the team)
          type: integer
      groupIds:
        description: The array of group Ids which are to be assigned the role
        type: array
        items:
          description: The Id of the group which is to be assigned the role (must be present in the team)
          type: integer
      description:
        description: Small description for the role
        type: string
      name:
        description: The name of the role to be created
        type: string
  deleteGroup:
    type: object
    properties:
      groupId:
        type: integer